{"version":3,"sources":["index.js"],"names":["Square","props","state","value","className","onClick","this","React","Component","Board","i","squares","renderSquare","Game","history","Array","fill","stepNumber","xIsNext","length","slice","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uPAKMA,G,wDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,MAHI,E,qDAOT,IAAD,OACL,OACI,4BAAQC,UAAU,SAASC,QAAS,kBAAM,EAAKJ,MAAMI,YAChDC,KAAKL,MAAME,W,GAXPI,IAAMC,YAkBrBC,E,2KAGWC,GAAI,IAAD,OACZ,OAAO,kBAACV,EAAD,CAEHG,MAAOG,KAAKL,MAAMU,QAAQD,GAC1BL,QAAS,kBAAM,EAAKJ,MAAMI,QAAQK,Q,+BAKtC,OACI,6BACI,yBAAKN,UAAU,aACVE,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,IAEvB,yBAAKR,UAAU,aACVE,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,IAEvB,yBAAKR,UAAU,aACVE,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,S,GA3BnBL,IAAMC,WAmCpBK,E,kDACF,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAETY,QAAS,CAAC,CACNH,QAASI,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EAEZC,SAAS,GAVE,E,wDAcPR,GACR,IAAMI,EAAUR,KAAKJ,MAAMY,QAErBH,EADUG,EAAQA,EAAQK,OAAS,GACjBR,QAAQS,QAC5BC,EAAgBV,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKJ,KAAKJ,MAAMgB,QAAU,IAAM,IACxCZ,KAAKgB,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CACrBZ,QAASA,KAEbM,WAAYH,EAAQK,OACpBD,SAAUZ,KAAKJ,MAAMgB,a,6BAItBM,GACHlB,KAAKgB,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAItB,IAgBFC,EAhBC,OACCX,EAAUR,KAAKJ,MAAMY,QACrBY,EAAUZ,EAAQR,KAAKJ,MAAMe,YAC7BU,EAASN,EAAgBK,EAAQf,SAEjCiB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQzB,QAAS,kBAAM,EAAK4B,OAAOH,KAAQC,OAYvD,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmBrB,KAAKJ,MAAMgB,QAAU,IAAM,KAIvD,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACK,EAAD,CACIE,QAASe,EAAQf,QACjBN,QAAS,SAACK,GAAD,OAAO,EAAKwB,YAAYxB,OAGzC,yBAAKN,UAAU,aACX,6BAAMqB,GACN,4BAAKG,S,GAxENrB,IAAMC,WAsFzB,SAASa,EAAgBV,GAWrB,IAVA,IAAMwB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFzB,EAAI,EAAGA,EAAIyB,EAAMhB,OAAQT,IAAK,CAAC,IAAD,cACjByB,EAAMzB,GADW,GAC5B0B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI3B,EAAQyB,IAAMzB,EAAQyB,KAAOzB,EAAQ0B,IAAM1B,EAAQyB,KAAOzB,EAAQ2B,GAClE,OAAO3B,EAAQyB,GAGvB,OAAO,KAtBXG,IAASC,OACL,kBAAC3B,EAAD,MACA4B,SAASC,eAAe,W","file":"static/js/main.f8936910.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// 每一个格子\nclass Square extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: null,\n        };\n    }\n\n    render() {\n        return (\n            <button className=\"square\" onClick={() => this.props.onClick()}>\n                {this.props.value}\n            </button >\n        );\n    }\n}\n\n// 棋盘\nclass Board extends React.Component {\n\n    // 函数 -> 返回第i个格子\n    renderSquare(i) {\n        return <Square\n            // 把value属性传递给子组件\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n// 棋游戏组件\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // 历史布局\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            // 哪一步历史\n            stepNumber: 0,\n            // 是否下一步是X下，还是O下\n            xIsNext: true\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"sourceRoot":""}